//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public RotationAddedListenerComponent RotationAddedListener { get { return (RotationAddedListenerComponent)GetComponent(GameComponentsLookup.RotationAddedListener); } }
	public bool HasRotationAddedListener { get { return HasComponent(GameComponentsLookup.RotationAddedListener); } }

	public void AddRotationAddedListener(System.Collections.Generic.List<IRotationAddedListener> newValue)
	{
		var index = GameComponentsLookup.RotationAddedListener;
		var component = (RotationAddedListenerComponent)CreateComponent(index, typeof(RotationAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		AddComponent(index, component);
	}

	public void ReplaceRotationAddedListener(System.Collections.Generic.List<IRotationAddedListener> newValue)
	{
		var index = GameComponentsLookup.RotationAddedListener;
		var component = (RotationAddedListenerComponent)CreateComponent(index, typeof(RotationAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = newValue;
		#endif
		ReplaceComponent(index, component);
	}

	public void CopyRotationAddedListenerTo(RotationAddedListenerComponent copyComponent)
	{
		var index = GameComponentsLookup.RotationAddedListener;
		var component = (RotationAddedListenerComponent)CreateComponent(index, typeof(RotationAddedListenerComponent));
		#if !ENTITAS_REDUX_NO_IMPL
		component.value = copyComponent.value;
		#endif
		ReplaceComponent(index, component);
	}

	public void RemoveRotationAddedListener()
	{
		RemoveComponent(GameComponentsLookup.RotationAddedListener);
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity : IRotationAddedListenerEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher
{
	static JCMG.EntitasRedux.IMatcher<GameEntity> _matcherRotationAddedListener;

	public static JCMG.EntitasRedux.IMatcher<GameEntity> RotationAddedListener
	{
		get
		{
			if (_matcherRotationAddedListener == null)
			{
				var matcher = (JCMG.EntitasRedux.Matcher<GameEntity>)JCMG.EntitasRedux.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationAddedListener);
				matcher.ComponentNames = GameComponentsLookup.ComponentNames;
				_matcherRotationAddedListener = matcher;
			}

			return _matcherRotationAddedListener;
		}
	}
}

//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity
{
	public void AddRotationAddedListener(IRotationAddedListener value)
	{
		var listeners = HasRotationAddedListener
			? RotationAddedListener.value
			: new System.Collections.Generic.List<IRotationAddedListener>();
		listeners.Add(value);
		ReplaceRotationAddedListener(listeners);
	}

	public void RemoveRotationAddedListener(IRotationAddedListener value, bool removeComponentWhenEmpty = true)
	{
		var listeners = RotationAddedListener.value;
		listeners.Remove(value);
		if (removeComponentWhenEmpty && listeners.Count == 0)
		{
			RemoveRotationAddedListener();
		}
		else
		{
			ReplaceRotationAddedListener(listeners);
		}
	}
}
